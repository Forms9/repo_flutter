// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3211050475862023606),
      name: 'DailySaleData',
      lastPropertyId: const IdUid(5, 119382616465465632),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7957423805733672749),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2614218045541714060),
            name: 'saleCard',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1274984848946940854),
            name: 'saleCash',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3929824047389283732),
            name: 'salePoints',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 119382616465465632),
            name: 'saleCreatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 582416537475179594),
      name: 'DispatchData',
      lastPropertyId: const IdUid(3, 8182991494490060213),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2382006762269789208),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8635939744964551249),
            name: 'dispatchNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8182991494490060213),
            name: 'dispatchCreatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 907357551640113803),
      name: 'POSNumber',
      lastPropertyId: const IdUid(2, 6994348560745367816),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5803968131238391170),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6994348560745367816),
            name: 'posNumber',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7539989029055231565),
      name: 'ProductData',
      lastPropertyId: const IdUid(38, 1547790408898002842),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 732170168634653741),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4035616841613862724),
            name: 'serverId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6264948281612430701),
            name: 'inwardNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4703814819711392040),
            name: 'uniqueNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6995751249707588152),
            name: 'productName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7946684446533083363),
            name: 'supplier',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6981514641399719972),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4677273145722644030),
            name: 'qty',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9162562697919484343),
            name: 'height',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5549073879785216024),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6300976785731236407),
            name: 'depth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3555187647260779089),
            name: 'size',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6023269600069008580),
            name: 'headline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1467815738770268389),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2373218293355252027),
            name: 'description2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4783248866313763177),
            name: 'supSlNp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2537153951343216358),
            name: 'material',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8048032185046312303),
            name: 'finish',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 2493759388405296321),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 8530669156479636754),
            name: 'photoLink',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 6528601198465913717),
            name: 'photoLinkMain',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4129028122071015256),
            name: 'rate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 3011980728520853357),
            name: 'calculation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 459472484028419808),
            name: 'cipher',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 2735664736396451754),
            name: 'createdDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 9210083403324507054),
            name: 'add1',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 1083817969335800757),
            name: 'add2',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 1091711261628667985),
            name: 'add1a',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 6340058796389562242),
            name: 'add2a',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 5794876710418818126),
            name: 'billNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 1750258722161915664),
            name: 'greturn',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 1864161522604842413),
            name: 'labelQty',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 1216850512631290387),
            name: 'packingNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 1774962269680315911),
            name: 'packedQuantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 5051083619866413934),
            name: 'cartonNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 4555262334160596314),
            name: 'invoiceNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 122991981437129892),
            name: 'transportBy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 1547790408898002842),
            name: 'distpatchNo',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5489413969091911471),
      name: 'SaleData',
      lastPropertyId: const IdUid(11, 8616624610014850365),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5626418526734027581),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3791648665889444886),
            name: 'saleNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8213864549559320082),
            name: 'saleCreatedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4228825978140714088),
            name: 'saleTotal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5295853426704818871),
            name: 'saleDiscount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7643544021026925835),
            name: 'saleCard',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8121168139733633726),
            name: 'saleCash',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 343654549374751522),
            name: 'salePoints',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6847292380465994772),
            name: 'saleBalance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3195034772354539160),
            name: 'data',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8616624610014850365),
            name: 'isNoExch',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1924104367681433699),
      name: 'SaleMode',
      lastPropertyId: const IdUid(2, 1806392983376333134),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4249390422201444062),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1806392983376333134),
            name: 'mode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8048183904918418234),
      name: 'SaleNumberData',
      lastPropertyId: const IdUid(3, 7103525808896102638),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4273710606782520611),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6421313012938563928),
            name: 'saleNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7103525808896102638),
            name: 'saleCreatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 7037583787431036762),
      name: 'User',
      lastPropertyId: const IdUid(5, 576208338849882702),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3452335734782574743),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8495289413798702582),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 678436801485073667),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2952407073235245333),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 576208338849882702),
            name: 'store',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 7037583787431036762),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DailySaleData: EntityDefinition<DailySaleData>(
        model: _entities[0],
        toOneRelations: (DailySaleData object) => [],
        toManyRelations: (DailySaleData object) => {},
        getId: (DailySaleData object) => object.id,
        setId: (DailySaleData object, int id) {
          object.id = id;
        },
        objectToFB: (DailySaleData object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.saleCard);
          fbb.addFloat64(2, object.saleCash);
          fbb.addFloat64(3, object.salePoints);
          fbb.addInt64(4, object.saleCreatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final saleCardParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final saleCashParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final salePointsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final saleCreatedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = DailySaleData(
              id: idParam,
              saleCard: saleCardParam,
              saleCash: saleCashParam,
              salePoints: salePointsParam,
              saleCreatedDate: saleCreatedDateParam);

          return object;
        }),
    DispatchData: EntityDefinition<DispatchData>(
        model: _entities[1],
        toOneRelations: (DispatchData object) => [],
        toManyRelations: (DispatchData object) => {},
        getId: (DispatchData object) => object.id,
        setId: (DispatchData object, int id) {
          object.id = id;
        },
        objectToFB: (DispatchData object, fb.Builder fbb) {
          final dispatchNumberOffset = fbb.writeString(object.dispatchNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dispatchNumberOffset);
          fbb.addInt64(2, object.dispatchCreatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dispatchNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final dispatchCreatedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = DispatchData(
              id: idParam,
              dispatchNumber: dispatchNumberParam,
              dispatchCreatedDate: dispatchCreatedDateParam);

          return object;
        }),
    POSNumber: EntityDefinition<POSNumber>(
        model: _entities[2],
        toOneRelations: (POSNumber object) => [],
        toManyRelations: (POSNumber object) => {},
        getId: (POSNumber object) => object.id,
        setId: (POSNumber object, int id) {
          object.id = id;
        },
        objectToFB: (POSNumber object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.posNumber);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final posNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = POSNumber(id: idParam, posNumber: posNumberParam);

          return object;
        }),
    ProductData: EntityDefinition<ProductData>(
        model: _entities[3],
        toOneRelations: (ProductData object) => [],
        toManyRelations: (ProductData object) => {},
        getId: (ProductData object) => object.id,
        setId: (ProductData object, int id) {
          object.id = id;
        },
        objectToFB: (ProductData object, fb.Builder fbb) {
          final inwardNoOffset = object.inwardNo == null
              ? null
              : fbb.writeString(object.inwardNo!);
          final uniqueNoOffset = object.uniqueNo == null
              ? null
              : fbb.writeString(object.uniqueNo!);
          final productNameOffset = object.productName == null
              ? null
              : fbb.writeString(object.productName!);
          final supplierOffset = object.supplier == null
              ? null
              : fbb.writeString(object.supplier!);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          final sizeOffset =
              object.size == null ? null : fbb.writeString(object.size!);
          final headlineOffset = object.headline == null
              ? null
              : fbb.writeString(object.headline!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final description2Offset = object.description2 == null
              ? null
              : fbb.writeString(object.description2!);
          final supSlNpOffset =
              object.supSlNp == null ? null : fbb.writeString(object.supSlNp!);
          final materialOffset = object.material == null
              ? null
              : fbb.writeString(object.material!);
          final finishOffset =
              object.finish == null ? null : fbb.writeString(object.finish!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final photoLinkOffset = object.photoLink == null
              ? null
              : fbb.writeString(object.photoLink!);
          final photoLinkMainOffset = object.photoLinkMain == null
              ? null
              : fbb.writeString(object.photoLinkMain!);
          final calculationOffset = object.calculation == null
              ? null
              : fbb.writeString(object.calculation!);
          final cipherOffset =
              object.cipher == null ? null : fbb.writeString(object.cipher!);
          final createdDateOffset = object.createdDate == null
              ? null
              : fbb.writeString(object.createdDate!);
          final billNoOffset =
              object.billNo == null ? null : fbb.writeString(object.billNo!);
          final packingNoOffset = object.packingNo == null
              ? null
              : fbb.writeString(object.packingNo!);
          final cartonNoOffset = object.cartonNo == null
              ? null
              : fbb.writeString(object.cartonNo!);
          final invoiceNoOffset = object.invoiceNo == null
              ? null
              : fbb.writeString(object.invoiceNo!);
          final transportByOffset = object.transportBy == null
              ? null
              : fbb.writeString(object.transportBy!);
          final distpatchNoOffset = object.distpatchNo == null
              ? null
              : fbb.writeString(object.distpatchNo!);
          fbb.startTable(39);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.serverId);
          fbb.addOffset(2, inwardNoOffset);
          fbb.addOffset(3, uniqueNoOffset);
          fbb.addOffset(4, productNameOffset);
          fbb.addOffset(5, supplierOffset);
          fbb.addOffset(6, colorOffset);
          fbb.addFloat64(7, object.qty);
          fbb.addFloat64(8, object.height);
          fbb.addFloat64(9, object.width);
          fbb.addFloat64(10, object.depth);
          fbb.addOffset(11, sizeOffset);
          fbb.addOffset(12, headlineOffset);
          fbb.addOffset(13, descriptionOffset);
          fbb.addOffset(14, description2Offset);
          fbb.addOffset(15, supSlNpOffset);
          fbb.addOffset(16, materialOffset);
          fbb.addOffset(17, finishOffset);
          fbb.addOffset(18, typeOffset);
          fbb.addOffset(19, photoLinkOffset);
          fbb.addOffset(20, photoLinkMainOffset);
          fbb.addFloat64(21, object.rate);
          fbb.addOffset(22, calculationOffset);
          fbb.addOffset(23, cipherOffset);
          fbb.addOffset(24, createdDateOffset);
          fbb.addFloat64(25, object.add1);
          fbb.addFloat64(26, object.add2);
          fbb.addFloat64(27, object.add1a);
          fbb.addFloat64(28, object.add2a);
          fbb.addOffset(29, billNoOffset);
          fbb.addFloat64(30, object.greturn);
          fbb.addFloat64(31, object.labelQty);
          fbb.addOffset(32, packingNoOffset);
          fbb.addFloat64(33, object.packedQuantity);
          fbb.addOffset(34, cartonNoOffset);
          fbb.addOffset(35, invoiceNoOffset);
          fbb.addOffset(36, transportByOffset);
          fbb.addOffset(37, distpatchNoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final inwardNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final uniqueNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final productNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final qtyParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final heightParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final widthParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final depthParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final sizeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final headlineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final description2Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final supSlNpParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final materialParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final finishParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final photoLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final photoLinkMainParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final rateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 46);
          final calculationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final cipherParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 50);
          final createdDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 52);
          final add1Param = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 54);
          final add2Param = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 56);
          final add1aParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 58);
          final add2aParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 60);
          final billNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 62);
          final greturnParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 64);
          final labelQtyParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 66);
          final packingNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 68);
          final packedQuantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 70);
          final cartonNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 72);
          final invoiceNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 74);
          final transportByParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 76);
          final distpatchNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 78);
          final object = ProductData(
              id: idParam,
              serverId: serverIdParam,
              inwardNo: inwardNoParam,
              uniqueNo: uniqueNoParam,
              productName: productNameParam,
              supplier: supplierParam,
              color: colorParam,
              qty: qtyParam,
              height: heightParam,
              width: widthParam,
              depth: depthParam,
              size: sizeParam,
              headline: headlineParam,
              description: descriptionParam,
              description2: description2Param,
              supSlNp: supSlNpParam,
              material: materialParam,
              finish: finishParam,
              type: typeParam,
              photoLink: photoLinkParam,
              photoLinkMain: photoLinkMainParam,
              rate: rateParam,
              calculation: calculationParam,
              cipher: cipherParam,
              createdDate: createdDateParam,
              add1: add1Param,
              add2: add2Param,
              add1a: add1aParam,
              add2a: add2aParam,
              billNo: billNoParam,
              greturn: greturnParam,
              labelQty: labelQtyParam,
              packingNo: packingNoParam,
              packedQuantity: packedQuantityParam,
              cartonNo: cartonNoParam,
              invoiceNo: invoiceNoParam,
              transportBy: transportByParam,
              distpatchNo: distpatchNoParam);

          return object;
        }),
    SaleData: EntityDefinition<SaleData>(
        model: _entities[4],
        toOneRelations: (SaleData object) => [],
        toManyRelations: (SaleData object) => {},
        getId: (SaleData object) => object.id,
        setId: (SaleData object, int id) {
          object.id = id;
        },
        objectToFB: (SaleData object, fb.Builder fbb) {
          final saleNumberOffset = fbb.writeString(object.saleNumber);
          final saleTotalOffset = fbb.writeString(object.saleTotal);
          final saleDiscountOffset = fbb.writeString(object.saleDiscount);
          final saleCardOffset = fbb.writeString(object.saleCard);
          final saleCashOffset = fbb.writeString(object.saleCash);
          final salePointsOffset = fbb.writeString(object.salePoints);
          final saleBalanceOffset = fbb.writeString(object.saleBalance);
          final dataOffset = fbb.writeList(
              object.data.map(fbb.writeString).toList(growable: false));
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, saleNumberOffset);
          fbb.addInt64(2, object.saleCreatedDate.millisecondsSinceEpoch);
          fbb.addOffset(3, saleTotalOffset);
          fbb.addOffset(4, saleDiscountOffset);
          fbb.addOffset(5, saleCardOffset);
          fbb.addOffset(6, saleCashOffset);
          fbb.addOffset(7, salePointsOffset);
          fbb.addOffset(8, saleBalanceOffset);
          fbb.addOffset(9, dataOffset);
          fbb.addBool(10, object.isNoExch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final saleNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final saleCreatedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final saleTotalParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final saleDiscountParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final saleCardParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final saleCashParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final salePointsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final saleBalanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final dataParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 22, []);
          final isNoExchParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = SaleData(
              id: idParam,
              saleNumber: saleNumberParam,
              saleCreatedDate: saleCreatedDateParam,
              saleTotal: saleTotalParam,
              saleDiscount: saleDiscountParam,
              saleCard: saleCardParam,
              saleCash: saleCashParam,
              salePoints: salePointsParam,
              saleBalance: saleBalanceParam,
              data: dataParam,
              isNoExch: isNoExchParam);

          return object;
        }),
    SaleMode: EntityDefinition<SaleMode>(
        model: _entities[5],
        toOneRelations: (SaleMode object) => [],
        toManyRelations: (SaleMode object) => {},
        getId: (SaleMode object) => object.id,
        setId: (SaleMode object, int id) {
          object.id = id;
        },
        objectToFB: (SaleMode object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.mode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final modeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final object = SaleMode(id: idParam, mode: modeParam);

          return object;
        }),
    SaleNumberData: EntityDefinition<SaleNumberData>(
        model: _entities[6],
        toOneRelations: (SaleNumberData object) => [],
        toManyRelations: (SaleNumberData object) => {},
        getId: (SaleNumberData object) => object.id,
        setId: (SaleNumberData object, int id) {
          object.id = id;
        },
        objectToFB: (SaleNumberData object, fb.Builder fbb) {
          final saleNumberOffset = fbb.writeString(object.saleNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, saleNumberOffset);
          fbb.addInt64(2, object.saleCreatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final saleNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final saleCreatedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = SaleNumberData(
              id: idParam,
              saleNumber: saleNumberParam,
              saleCreatedDate: saleCreatedDateParam);

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[7],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          final typeOffset = fbb.writeString(object.type);
          final storeOffset = fbb.writeString(object.store);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, storeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final storeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = User(
              id: idParam,
              username: usernameParam,
              password: passwordParam,
              type: typeParam,
              store: storeParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DailySaleData] entity fields to define ObjectBox queries.
class DailySaleData_ {
  /// see [DailySaleData.id]
  static final id =
      QueryIntegerProperty<DailySaleData>(_entities[0].properties[0]);

  /// see [DailySaleData.saleCard]
  static final saleCard =
      QueryDoubleProperty<DailySaleData>(_entities[0].properties[1]);

  /// see [DailySaleData.saleCash]
  static final saleCash =
      QueryDoubleProperty<DailySaleData>(_entities[0].properties[2]);

  /// see [DailySaleData.salePoints]
  static final salePoints =
      QueryDoubleProperty<DailySaleData>(_entities[0].properties[3]);

  /// see [DailySaleData.saleCreatedDate]
  static final saleCreatedDate =
      QueryIntegerProperty<DailySaleData>(_entities[0].properties[4]);
}

/// [DispatchData] entity fields to define ObjectBox queries.
class DispatchData_ {
  /// see [DispatchData.id]
  static final id =
      QueryIntegerProperty<DispatchData>(_entities[1].properties[0]);

  /// see [DispatchData.dispatchNumber]
  static final dispatchNumber =
      QueryStringProperty<DispatchData>(_entities[1].properties[1]);

  /// see [DispatchData.dispatchCreatedDate]
  static final dispatchCreatedDate =
      QueryIntegerProperty<DispatchData>(_entities[1].properties[2]);
}

/// [POSNumber] entity fields to define ObjectBox queries.
class POSNumber_ {
  /// see [POSNumber.id]
  static final id = QueryIntegerProperty<POSNumber>(_entities[2].properties[0]);

  /// see [POSNumber.posNumber]
  static final posNumber =
      QueryIntegerProperty<POSNumber>(_entities[2].properties[1]);
}

/// [ProductData] entity fields to define ObjectBox queries.
class ProductData_ {
  /// see [ProductData.id]
  static final id =
      QueryIntegerProperty<ProductData>(_entities[3].properties[0]);

  /// see [ProductData.serverId]
  static final serverId =
      QueryIntegerProperty<ProductData>(_entities[3].properties[1]);

  /// see [ProductData.inwardNo]
  static final inwardNo =
      QueryStringProperty<ProductData>(_entities[3].properties[2]);

  /// see [ProductData.uniqueNo]
  static final uniqueNo =
      QueryStringProperty<ProductData>(_entities[3].properties[3]);

  /// see [ProductData.productName]
  static final productName =
      QueryStringProperty<ProductData>(_entities[3].properties[4]);

  /// see [ProductData.supplier]
  static final supplier =
      QueryStringProperty<ProductData>(_entities[3].properties[5]);

  /// see [ProductData.color]
  static final color =
      QueryStringProperty<ProductData>(_entities[3].properties[6]);

  /// see [ProductData.qty]
  static final qty =
      QueryDoubleProperty<ProductData>(_entities[3].properties[7]);

  /// see [ProductData.height]
  static final height =
      QueryDoubleProperty<ProductData>(_entities[3].properties[8]);

  /// see [ProductData.width]
  static final width =
      QueryDoubleProperty<ProductData>(_entities[3].properties[9]);

  /// see [ProductData.depth]
  static final depth =
      QueryDoubleProperty<ProductData>(_entities[3].properties[10]);

  /// see [ProductData.size]
  static final size =
      QueryStringProperty<ProductData>(_entities[3].properties[11]);

  /// see [ProductData.headline]
  static final headline =
      QueryStringProperty<ProductData>(_entities[3].properties[12]);

  /// see [ProductData.description]
  static final description =
      QueryStringProperty<ProductData>(_entities[3].properties[13]);

  /// see [ProductData.description2]
  static final description2 =
      QueryStringProperty<ProductData>(_entities[3].properties[14]);

  /// see [ProductData.supSlNp]
  static final supSlNp =
      QueryStringProperty<ProductData>(_entities[3].properties[15]);

  /// see [ProductData.material]
  static final material =
      QueryStringProperty<ProductData>(_entities[3].properties[16]);

  /// see [ProductData.finish]
  static final finish =
      QueryStringProperty<ProductData>(_entities[3].properties[17]);

  /// see [ProductData.type]
  static final type =
      QueryStringProperty<ProductData>(_entities[3].properties[18]);

  /// see [ProductData.photoLink]
  static final photoLink =
      QueryStringProperty<ProductData>(_entities[3].properties[19]);

  /// see [ProductData.photoLinkMain]
  static final photoLinkMain =
      QueryStringProperty<ProductData>(_entities[3].properties[20]);

  /// see [ProductData.rate]
  static final rate =
      QueryDoubleProperty<ProductData>(_entities[3].properties[21]);

  /// see [ProductData.calculation]
  static final calculation =
      QueryStringProperty<ProductData>(_entities[3].properties[22]);

  /// see [ProductData.cipher]
  static final cipher =
      QueryStringProperty<ProductData>(_entities[3].properties[23]);

  /// see [ProductData.createdDate]
  static final createdDate =
      QueryStringProperty<ProductData>(_entities[3].properties[24]);

  /// see [ProductData.add1]
  static final add1 =
      QueryDoubleProperty<ProductData>(_entities[3].properties[25]);

  /// see [ProductData.add2]
  static final add2 =
      QueryDoubleProperty<ProductData>(_entities[3].properties[26]);

  /// see [ProductData.add1a]
  static final add1a =
      QueryDoubleProperty<ProductData>(_entities[3].properties[27]);

  /// see [ProductData.add2a]
  static final add2a =
      QueryDoubleProperty<ProductData>(_entities[3].properties[28]);

  /// see [ProductData.billNo]
  static final billNo =
      QueryStringProperty<ProductData>(_entities[3].properties[29]);

  /// see [ProductData.greturn]
  static final greturn =
      QueryDoubleProperty<ProductData>(_entities[3].properties[30]);

  /// see [ProductData.labelQty]
  static final labelQty =
      QueryDoubleProperty<ProductData>(_entities[3].properties[31]);

  /// see [ProductData.packingNo]
  static final packingNo =
      QueryStringProperty<ProductData>(_entities[3].properties[32]);

  /// see [ProductData.packedQuantity]
  static final packedQuantity =
      QueryDoubleProperty<ProductData>(_entities[3].properties[33]);

  /// see [ProductData.cartonNo]
  static final cartonNo =
      QueryStringProperty<ProductData>(_entities[3].properties[34]);

  /// see [ProductData.invoiceNo]
  static final invoiceNo =
      QueryStringProperty<ProductData>(_entities[3].properties[35]);

  /// see [ProductData.transportBy]
  static final transportBy =
      QueryStringProperty<ProductData>(_entities[3].properties[36]);

  /// see [ProductData.distpatchNo]
  static final distpatchNo =
      QueryStringProperty<ProductData>(_entities[3].properties[37]);
}

/// [SaleData] entity fields to define ObjectBox queries.
class SaleData_ {
  /// see [SaleData.id]
  static final id = QueryIntegerProperty<SaleData>(_entities[4].properties[0]);

  /// see [SaleData.saleNumber]
  static final saleNumber =
      QueryStringProperty<SaleData>(_entities[4].properties[1]);

  /// see [SaleData.saleCreatedDate]
  static final saleCreatedDate =
      QueryIntegerProperty<SaleData>(_entities[4].properties[2]);

  /// see [SaleData.saleTotal]
  static final saleTotal =
      QueryStringProperty<SaleData>(_entities[4].properties[3]);

  /// see [SaleData.saleDiscount]
  static final saleDiscount =
      QueryStringProperty<SaleData>(_entities[4].properties[4]);

  /// see [SaleData.saleCard]
  static final saleCard =
      QueryStringProperty<SaleData>(_entities[4].properties[5]);

  /// see [SaleData.saleCash]
  static final saleCash =
      QueryStringProperty<SaleData>(_entities[4].properties[6]);

  /// see [SaleData.salePoints]
  static final salePoints =
      QueryStringProperty<SaleData>(_entities[4].properties[7]);

  /// see [SaleData.saleBalance]
  static final saleBalance =
      QueryStringProperty<SaleData>(_entities[4].properties[8]);

  /// see [SaleData.data]
  static final data =
      QueryStringVectorProperty<SaleData>(_entities[4].properties[9]);

  /// see [SaleData.isNoExch]
  static final isNoExch =
      QueryBooleanProperty<SaleData>(_entities[4].properties[10]);
}

/// [SaleMode] entity fields to define ObjectBox queries.
class SaleMode_ {
  /// see [SaleMode.id]
  static final id = QueryIntegerProperty<SaleMode>(_entities[5].properties[0]);

  /// see [SaleMode.mode]
  static final mode =
      QueryBooleanProperty<SaleMode>(_entities[5].properties[1]);
}

/// [SaleNumberData] entity fields to define ObjectBox queries.
class SaleNumberData_ {
  /// see [SaleNumberData.id]
  static final id =
      QueryIntegerProperty<SaleNumberData>(_entities[6].properties[0]);

  /// see [SaleNumberData.saleNumber]
  static final saleNumber =
      QueryStringProperty<SaleNumberData>(_entities[6].properties[1]);

  /// see [SaleNumberData.saleCreatedDate]
  static final saleCreatedDate =
      QueryIntegerProperty<SaleNumberData>(_entities[6].properties[2]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[7].properties[0]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[7].properties[1]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[7].properties[2]);

  /// see [User.type]
  static final type = QueryStringProperty<User>(_entities[7].properties[3]);

  /// see [User.store]
  static final store = QueryStringProperty<User>(_entities[7].properties[4]);
}
